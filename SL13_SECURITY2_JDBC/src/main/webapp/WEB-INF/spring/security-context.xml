<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:security="http://www.springframework.org/schema/security"
   xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd
      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd">

    <!-- 에러 : spring-security-4.2.xsd 수정. -->   
          
      
   <!-- css, js, image, static(정적) 등등   보안 필터 체인 X -->
   <security:http pattern="/static/**" security="none"></security:http>   
   <security:http pattern="/design/**" security="none"></security:http>
   <security:http pattern="/css/**" security="none"></security:http>
   <security:http pattern="/js/**" security="none"></security:http>
   <!-- 권맑음 글쓰기 403 에러 -->   
   <!-- <security:http pattern="/customer/**" security="none"></security:http> -->      
   
   <security:http use-expressions="true"> 
      <!-- 시큐리티 접근 권한 설정 --> 
      <!-- <security:intercept-url pattern="요청URL" 
      access="권한 체크(권한명, 표현식 p681)"/> -->
      
      <!-- 
      <security:intercept-url pattern="/user/loginForm.htm" access="permitAll" />
      <security:intercept-url pattern="/admin/manager/**" access="hasAuthority('ROLE_MANAGER')" />
      <security:intercept-url pattern="/member/**" access="isAuthenticated()" />
      <security:intercept-url pattern="/**" access="permitAll" />
       --> 
      <security:intercept-url pattern="/customer/noticeReg.htm" access="isAuthenticated()"/>
      <security:intercept-url pattern="/customer/noticeDel.htm" access="hasRole('ROLE_ADMIN')"/>
      <security:intercept-url pattern="/**" access="permitAll" />
      
      <!-- <security:form-login/> -->
      
      <!-- 403 접근 금지 에러가 발생했을 때 처리 -->
      <!-- <security:access-denied-handler error-page="/common/accessError.htm"/> -->
      
      <!-- 접근 금지 발생시 직접 구현 -->
      <security:access-denied-handler ref="customerAccessDeniedHandler"/>
        
      <!-- 커스텀 로그인 페이지 -->
      <security:form-login 
      		login-page="/joinus/login.htm" 
      		authentication-success-handler-ref="customLoginSuccessHandler"
      		authentication-failure-url="/joinus/login.htm?error=true"
      		default-target-url="/index.htm"
      		/>
      
      <security:logout logout-url="/joinus/logout.htm" invalidate-session="true" logout-success-url="/"/>
      
   </security:http>   
   
   <!-- PasswordEncoder -->
   <bean id="bCryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
   
   <!-- 인증 관리자 : 총괄책임자 -->
   <security:authentication-manager> 
     <!-- 인증제공자 : 실무자 -->
     <!-- 
     <security:authentication-provider>
       <security:user-service>
         <security:user name="hong" authorities="ROLE_USER" password="1234"/>
         <security:user name="admin" authorities="ROLE_USER, ROLE_MANAGER, ROLE_ADMIN" password="1234"/>
         
         비밀번호 앞에{noop}을 붙여 PasswordEncoder 사용 X
         <security:user name="hong" authorities="ROLE_USER" password="{noop}1234"/>
         <security:user name="admin" authorities="ROLE_USER, ROLE_MANAGER, ROLE_ADMIN" password="{noop}1234"/>
       </security:user-service>
     </security:authentication-provider>
     -->
     
     <!-- JDBC 로그인 처리 -->
     <security:authentication-provider>
     	<security:jdbc-user-service 
     	data-source-ref="dataSource"
     	users-by-username-query="SELECT id AS USERNAME, pwd AS PASSWORD, enabled FROM member WHERE id = ?"
        authorities-by-username-query="SELECT username AS userid, authority AS auth FROM member_authorities WHERE username = ?"
     	/>
     	<security:password-encoder ref="bCryptPasswordEncoder"/>
     </security:authentication-provider>
   </security:authentication-manager>

	<!-- csrf 토큰 사용 X 보안처리 X-->
	<!-- <security:csrf disabled="true"/> -->
</beans>
