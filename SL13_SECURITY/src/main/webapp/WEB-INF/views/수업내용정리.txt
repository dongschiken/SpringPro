

1. SECURITY(보안) = 인증(Authentication) + 권한(인가)(Authorization)
				   익명(guest)로그인		 관리자, 일반회원
2. 인증, 권한 처리 = 쿠키, 세션( 더많이 사용 )
3. 서블릿 필터, 스프링 인터셉터(interceptor) = 인증처리

4. 스프링 시큐리티(보안 = 인증, 권한)
	1) pom.xml
	 <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-web</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>

      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-config</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>

      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-core</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>

      <!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-taglibs -->
      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-taglibs</artifactId>
         <version>${org.springframework-version}</version>
      </dependency>
      이것을 추가해야한다.
      
5. 체크 제약조건 삭제
   member  point < 3
   
6. web.xml

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/spring/root-context.xml
			/WEB-INF/spring/security-context.xml
		</param-value>
	</context-param>
	이부분이 포함되어 있어야 한다.

7. web.xml

   <filter>
      <filter-name>springSecurityFilterChain</filter-name>
      <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
   </filter>
   <filter-mapping>
      <filter-name>springSecurityFilterChain</filter-name>
      <url-pattern>/*</url-pattern>
   </filter-mapping> 
   이부분 있어야 한다.
 
 8. 시큐리티가 필요한 URL 설계
 	ㄱ. 게시판 글 쓰기 - 인증(로그인) O
 	    작성자 == 로그인한 계정(ID)
 	ㄴ. 게시판 수정/삭제 - 작성자 확인, 관리자인 경우 삭제는 가능하도록 처리
 	ㄷ. 그 외의 요청들은 인증받지 않아도 모든 사용자가 사용 가능.

9. 암기 - 시큐리티 내부 구조 (개요)
	1. AuthenticationManager(인증관리자)  - 가장 중요한 역할. ( 실제 인증을 담당 + 인터페이스, 인증을 다양한 방식으로 인증처리 할 수 있도록 설계됨(책임자) )
	2. ProviderManager(제공관리자)		   - AuthenticationProvider 객체를 이용해서 인증처리를 위임하는 역할 + 인터페이스
	3. AuthenticationProvider(인증제공자) - 실제 인증 처리를 하는 역할(실무자)
	4. UserDetailsService(사용자상세서비스) - 인증된 실제 사용자의 정보 + 권한 정보를 처리해서 반환하는 객체 + 인터페이스

	(3) + (4) 를 직접 구현할 수 있다.

10. 시큐리티 설계작업(8번) -> 접근 제한 설정 코딩
	security-context.xml

11. 메모리 인증방식으로 우선적으로 인증 처리 
	<!-- 인증 관리자 : 총괄책임자 -->
	<security:authentication-manager>
		<!-- 인증 제공자 : 실무자 -->
		<security:authentication-provider>
			<security:user-service>
				<security:user name="hong" authorities="ROLE_USER" password="1234"/>
         		<security:user name="admin" authorities="ROLE_USER, ROLE_MANAGER, ROLE_ADMIN" password=""/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>

12. security-context.xml 추가

	<!-- http, authentication-manager는 필수 -->
	<!-- 표현식 사용 true -->
	<security:http use-expressions="true">
		<security:intercept-url pattern="요청URL" access="권한 체크( 권한명, 표현식 )" />
		<security:form-login />
		
	<!-- 
      <security:intercept-url pattern="/user/loginForm.htm" access="permitAll" />
      <security:intercept-url pattern="/admin/manager/**" access="hasAuthority('ROLE_MANAGER')" />
      <security:intercept-url pattern="/member/**" access="isAuthenticated()" />
      <security:intercept-url pattern="/**" access="permitAll" />
       -->
      
      n="/customer/noticeReg.htm" access="isAuthenticated()"/>
      <security:intercept-url pattern="/customer/noticeDel.htm" access="hasRole('ROLE_ADMIN')"/>
      <security:intercept-url p
      <security:intercept-url patterattern="/**" access="permitAll" />
      <security:form-login/>
	</security:http> 

13. header.jsp 로그인 버튼
	<li><a href="${pageContext.request.contextPath}/login">로그인</a></li> 

14. 스프링 시큐리티 5버전부터는 반드시 PasswordEncoder라는 존재를 이용해서 인증처리하도록 되었다. 비밀번호 인코딩 지정.
	임시 방편으로 PasswordEncoder 이걸 사용 x 하려면 비밀번호 앞에 {noop}를 붙이면 된다.

15. 403 접근 금지 에러가 발생했을 때 처리
	1) 특정 URL로 이동하도록 처리
	
	CommonsController.java 추가

16. AccessDeniedHandler 내가 객체를 만들어서 이 에러 페이지로 이동하도록 코딩
	<security:access-denied-handler ref="customAccessDeniedHandler"/>
	org.doig.ik.security.CutomAccessDeniedHandler.java
	
17. 커스텀 로그인 페이지 사용 security-context.xml에 추가
	<!-- 커스텀 로그인 페이지 -->
    <security:form-login login-page="/joinus/login.htm"/>
	이 요청은 반드시 GET방식 요청해야한다.
	